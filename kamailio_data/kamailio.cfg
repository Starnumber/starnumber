#!KAMAILIO  
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode: 
#!define WITH_DEBUG
#
# *** To enable mysql: 
#!define WITH_MYSQL
#
# *** To enable nat traversal (required for proxying) execute:
#!define WITH_NAT
#     - install RTPProxy: http://www.rtpproxy.org 
#     - start RTPProxy:
#              rtpproxy -u rtpproxy -l dev07.starnumber.net -s udp:localhost:22222
#
# *** To enable authentication execute:
#     - enable mysql
#!define WITH_AUTH
#     - add users using 'kamctl'
# *** To enable IP authentication (e.g. to block troublesome or badly behaving users) execute:
#     - enable mysql
#     - enable authentication
#     - define WITH_IPAUTH
#     - add IP addresses with group id '1' to 'address' table
# *** To enable persistent user location execute:
#     - enable mysql
#!define WITH_USRLOCDB


####### Defined Values #########

# *** Value defines - IDs used later in config
#!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
# TODO: create non-root MYSQL user and change below statement accordingly
#!define DBURL "mysql://root:SNpassword@localhost/openser"

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
# accounting flags for TODO: add and deploy accounting module 
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
# NAT flags
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7


####### Global Parameters #########

#!ifdef WITH_DEBUG
	debug=2
	log_stderror=yes
#!else
	debug=1
	log_stderror=no
#!endif

# TODO: debug this and get logfile working
log_facility=LOG_LOCAL0

/* add local domain aliases */
#
alias="dev07.starnumber.net"



/* port to listen to
 * - can be specified more than once if needed to listen on many ports */
listen=udp:212.54.128.167:5060
listen=udp:212.54.128.167:10120
listen=tcp:212.54.128.167:5060
listen=tcp:212.54.128.167:10120
# number of child threads per open port
# TODO: tune this for performance
children=0

# fork can be no for detailed debugging, but should be yes to use kamctl or any sercmd debugging interface
fork=yes

####### Modules Section ########

mpath="/usr/lib64/kamailio/modules_k/:/usr/lib64/kamailio/modules/"
#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif


#stateful transactions module - must be loaded before modules so and tmx 
loadmodule "tm.so"
#collects extensions from tm module
loadmodule "tmx.so"
# stateless UA server, needed for sl_send_reply
loadmodule "sl.so"

#required for Sanity Check in route[REQINIT]
loadmodule "sanity.so"

#Sip utilities: E.g.  tools to handle multiple ringing devices, also required for proxy 
loadmodule "siputils.so"


#xlog debug module
loadmodule "xlog.so"
# pseudo-variables module essential for debugging
loadmodule "pv.so"

# reguired for logical if branching
loadmodule "textops.so"

# required for sercmd and especially kamctl moni
loadmodule "mi_fifo.so"
loadmodule "ctl.so" 
loadmodule "kex.so" # collates modules list for moni statistical use


#max forward module, handles max forward SIP field
loadmodule "maxfwd.so"
# User location and registrar modules
loadmodule "usrloc.so"
loadmodule "registrar.so"

#NAT and rtpproxy modules required for stateful redirect with media proxy
#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpproxy.so"
# record routing logic for nathelper to function properly
loadmodule "rr.so"
#!endif


#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif


# ----------------- setting module-specific parameters ---------------

# ----- mi_fifo params -----
# required for sercmd and kamctl - module interface to fifo, which is interface used by ctl
modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")


# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
#modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif

# ----- registrar params -----
#only process REGISTER Requests 
#modparam("registrar", "method_filtering", 1)

#!ifdef WITH_NAT 
# ----- rtpproxy params -----
modparam("rtpproxy", "rtpproxy_sock", "udp:dev07.starnumber.net:22222")
# ----- nathelper params -----
#modparam("nathelper", "natping_interval", 30)
#modparam("nathelper", "ping_nated_only", 1)
#modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
#modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")
# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif


####### Routing Logic ########


# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
route {
	# SN custom logic
	# Default logic test settings for a test destination line - change these to test program flow
	$var(is_destination_line_registered)=1; # is destination line registered(1) or not registered(0)	
	$var(is_media_passthrough)=1; # is media pass through on (1) or off (0)

	$var(destination_line_count) = 1; # will fail to process if this is not 1
	# end default logic test settings
	#xlog("Processing SIP Method: $rm\n");
	# token check here

	# sanity check and flood detection on the initial request
	# blocks DDOS attacks with option floodblocking and SIP message sanity check
	route(REQINIT);

	# NAT detection
	route(NAT);

	
	# authenticate
	#route(AUTH);

	# act as a registration server
	route(REGISTRAR);

	# user location service
	route(LOCATION);

	# handle proxy message passthrough
	route(RTPPROXY);


	# pass to SNINVITE route to handle INVITE
	route(WITHINDLG);

	route(SNINVITE);


	route(RELAY);

	exit();
}

route[RELAY] {
xlog("RELAY method running\n");

#!ifdef WITH_NAT
	if (check_route_param("nat=yes")) {
		setbflag(FLB_NATB);
	}
	if (isflagset(FLT_NATS) || isbflagset(FLB_NATB)) {
		route(RTPPROXY);
	}
#!endif

	
	/* NAT is turned off, so stateful redirect is not possible */
	if (is_method("INVITE")) {
		#t_on_branch("BRANCH_ONE");
		t_on_reply("REPLY_ONE");
		t_on_failure("FAIL_ONE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}


# Starnumber main INVITE logic
route[SNINVITE] {
	if (is_method("INVITE")) {
	
	# only proceed if this request is an INVITE

	# extract called URI

		$var(called_uri)=$tu;
		$var(caller_uri)=$(hdr(Contact));		
		xlog("L_NOTICE","SNLOGIC called URI:$var(called_uri) caller URI:$var(caller_uri)\n");


	# find userID of called URI
		# lookup userID on local lookup hash, if possible, otherwise 
		# call to Application Layer to query DB for userID
		# TODO: fix this from hardcoded userID		
		$var(userID) = 2;


	# get inbound lineIDs of userID
		# TODO: make this actually work, no hardcoded line_id_array
		$var(line_id_array) = 2;


	# determine inbound lineID
		# TODO App layer performs business logic get determine inbound_line_id
		$var(inbound_line_id)= 2;

	# given inbound_line_id get destination_line_ids
	$var(destination_line_id)= 5;

	# destinations here

	# count of destination_line_ids
	$var(destination_line_count) = 1;

	# TODO: if ( count of destination_line_ids > 1 ) { do destination_multiple_phones_routine } else { continue for 1 destination_line_id }  
		if ($var(destination_line_count)==1) {

	#xlog("SNLOGIC destination line count is 1, proceeding ... \n");

			
	if ($var(is_destination_line_registered)==1) 
 	{
	# if YES line is registered

		# find Location of registeredDevice via called userID

		# is MediaPassThrough on for this called userID

		if ($var(is_media_passthrough)==1) {
			# if YES media passthrough is ON
			xlog("SNLOGIC 11 REGISTERED(1) and MEDIA(1), trying INVITE with MEDIA PROXY \n");
			sl_send_reply("100", "REGISTERED(1) and MEDIA(1), responding with INVITE to called, registered URI and USE PROXY");
  			

			
		}
		if ($var(is_media_passthrough)==0) {
			# if MEDIA passthrough is OFF 0
			xlog("SNLOGIC REGISTERED(1) and MEDIA(0).  trying INVITE to CALLED URI\n");
			sl_send_reply("100", "Please wait...REGISTERED(1) and MEDIA(0), trying INVITE to CALLED URI");


			#respond with reinvite with called party IP address (RED)

		}

	}
	# else if line is NOT REGISTERED
	if ($var(is_destination_line_registered)==0) 
 	{
	
		# is MediaPassThrough ON for this called userID destination line

		if ($var(is_media_passthrough)==1) {
			# if YES media passthrough is ON 1
			#send INVITE to called party from SN Agent, use proxy when connection completed
			xlog("SNLOGIC REGISTERED(0) and MEDIA(1).  Respond with INVITE to called party URI, followed by use proxy for media \n");
			sl_send_reply("100", "Please wait ... REGISTERED(1) and MEDIA(0) trying INVITE to called URI, will provide a media proxy");
		}

		# is MediaPassThrough OFF 0 for this called userID destination line
		# TODO: decide whether we EVER do stateless redirect
		if ($var(is_media_passthrough)==0) {
			#Send 305 with called party URI
			xlog("SNLOGIC REGISTERED(0) and MEDIA(0)., stateless redirect to the called party URI\n");
			if ($tu=="sip:adam@dev07.starnumber.net") {
				route(STATELESS_REDIRECT);
				xlog("SNLOGIC SL in progres about to call |sip:adam@dev07.starnumber.net|\n");
			}
			#sl_send_reply("305", "Please wait ... stateless redirect to the called party URI");
  			
		}
	} # parens matches if (is_method("INVITE")) above



		}
		route(ACCOUNTING);
	} # end of INVITE processing
	
	
	return;
}

# Call accounting
route[ACCOUNTING] {
	
	xlog("STARNUMBER ACCOUNTING happens here\n");
	return;
}

# Perform stateless redirect
route[STATELESS_REDIRECT] {
   # rewrite current URI, which is always part of destination ser 
   # TODO: insert logic to get actual call URI
   $var(test_call_uri)="sip:192.168.0.16:5080";
   rewriteuri("sip:192.168.0.16:5080"); 
   # append one more URI to the destination ser 
   append_branch("sip:192.168.0.16:5080"); 
   # redirect now 
   sl_send_reply("305", "Redirect"); 
   return;
   $ru="sip:192.168.0.16:5080"; 
   t_relay(); 
   exit; 	
}

# This route is a sanity check and basic DOS defensive capability
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood dection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself)
	{
		if($sht(ipban=>$si)!=$null)
		{
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req())
		{
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Caller NAT detection route
route[NAT] {
#!ifdef WITH_NAT
	force_rport();
	if (nat_uac_test("19")) {
		if (method=="REGISTER") {
			fix_nated_register();
		} else {
			fix_nated_contact();
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}



# Authentication route
route[AUTH] {
#!ifdef WITH_AUTH
	if (is_method("REGISTER"))
	{
		# authenticate the REGISTER requests (uncomment to enable auth)
		if (!www_authorize("dev07.starnumber.net", "subscriber"))
		{
			www_challenge("dev07.starnumber.net", "0");
			exit;
		}

		if ($au!=$tU)
		{
			sl_send_reply("403","Forbidden auth ID");
			exit;
		}
	} else {

#!ifdef WITH_IPAUTH
		if(allow_source_address())
		{
			# source IP allowed
			return;
		}
#!endif

		# authenticate if from local subscriber
		if (from_uri==myself)
		{
			if (!proxy_authorize("$fd", "subscriber")) {
				proxy_challenge("$fd", "0");
				exit;
			}
			if (is_method("PUBLISH"))
			{
				if ($au!=$tU) {
					sl_send_reply("403","Forbidden auth ID");
					exit;
				}
			} else {
				if ($au!=$fU) {
					sl_send_reply("403","Forbidden auth ID");
					exit;
				}
			}

			consume_credentials();
			# caller authenticated
		} else {
			# caller is not local subscriber, then check if it calls
			# a local destination, otherwise deny, not an open relay here
			if (!uri==myself)
			{
				sl_send_reply("403","Not relaying");
				exit;
			}
		}
	}
#!endif
	return;
}

# Handle SIP registrations
route[REGISTRAR] {
	if (is_method("REGISTER"))
	{
		if(isflagset(FLT_NATS))
		{
			setbflag(FLB_NATB);
			# uncomment next line to do SIP NAT pinging 
			## setbflag(FLB_NATSIPPING);
		}
		if (!save("location"))
			sl_reply_error();
			#xlog("REGISTER SIP request failed\n");


		exit;
	}
}

# RTPProxy control
route[RTPPROXY] {
#!ifdef WITH_NAT
	if (is_method("BYE")) {
		unforce_rtp_proxy();
	} else if (is_method("INVITE")){
		force_rtp_proxy();
	}
	if (!has_totag()) add_rr_param(";nat=yes");  
#!endif
	return;
}



# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		xlog("L_NOTICE","WITHINDLG called URI:$var(called_uri) caller URI:$var(caller_uri)\n");

		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(FLT_ACC); # do accounting ...
				setflag(FLT_ACCFAILED); # ... even if the transaction fails
			}
			route(RELAY);
		} else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}


# USER location service
route[LOCATION] {

#!ifdef WITH_ALIASDB
	# search in DB-based aliases
	alias_db_lookup("dbaliases");
#!endif

	if (!lookup("location")) {
		switch ($rc) {
			case -1:
			case -3:
				t_newtran();
				t_reply("404", "Not Found");
				exit;
			case -2:
				sl_send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	# when routing via usrloc, log the missed calls also
	if (is_method("INVITE"))
	{
		setflag(FLT_ACCMISSED);
	}
}
